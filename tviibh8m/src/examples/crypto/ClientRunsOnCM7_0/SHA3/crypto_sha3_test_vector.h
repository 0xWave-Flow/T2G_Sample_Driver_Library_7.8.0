/***************************************************************************//**
* \file crypto_sha3_test_vector.h
*
* \version 1.0
*
* \brief Supporting example file
*
********************************************************************************
* \copyright
* Copyright 2016-2020, Cypress Semiconductor Corporation. All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#ifndef __CRYPTO_SHA3_TEST_VECTOR__
#define __CRYPTO_SHA3_TEST_VECTOR__

#ifdef __CRYPTO_ENABLE_TEST_VECTOR__

/* Refer https://www.di-mgt.com.au/sha_testvectors.html */
/* https://www.browserling.com/tools/sha2-hash */
/* https://emn178.github.io/online-tools/md4.html */
/*******************************************************************************
* SHA3 224
********************************************************************************/
#define SHA3_224_NUMBER_OF_TEST (10)
const uint8_t SHA3_224_Vector0_Msg0[] = "abc";
const uint8_t SHA3_224_Vector0_Msg1[] = "";
const uint8_t SHA3_224_Vector0_Msg2[] = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
const uint8_t SHA3_224_Vector0_Msg3[] = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
const uint8_t SHA3_224_Vector0_Msg4[] = "0";        // len=1
const uint8_t SHA3_224_Vector0_Msg5[] = "00";       // len=2
const uint8_t SHA3_224_Vector0_Msg6[] = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len - 1
const uint8_t SHA3_224_Vector0_Msg7[] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // same as block len
const uint8_t SHA3_224_Vector0_Msg8[] = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len + 1
const uint8_t SHA3_224_Vector0_Msg9[] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len x 2

const uint8_t * const SHA3_224_MsgPtr[SHA3_224_NUMBER_OF_TEST] = 
{
    SHA3_224_Vector0_Msg0,
    SHA3_224_Vector0_Msg1,
    SHA3_224_Vector0_Msg2,
    SHA3_224_Vector0_Msg3,
    SHA3_224_Vector0_Msg4,
    SHA3_224_Vector0_Msg5,
    SHA3_224_Vector0_Msg6,
    SHA3_224_Vector0_Msg7,
    SHA3_224_Vector0_Msg8,
    SHA3_224_Vector0_Msg9,
};
const uint32_t SHA3_224_MsgLen[SHA3_224_NUMBER_OF_TEST] = 
{
    sizeof(SHA3_224_Vector0_Msg0) - 1,
    sizeof(SHA3_224_Vector0_Msg1) - 1,
    sizeof(SHA3_224_Vector0_Msg2) - 1,
    sizeof(SHA3_224_Vector0_Msg3) - 1,
    sizeof(SHA3_224_Vector0_Msg4) - 1,
    sizeof(SHA3_224_Vector0_Msg5) - 1,
    sizeof(SHA3_224_Vector0_Msg6) - 1,
    sizeof(SHA3_224_Vector0_Msg7) - 1,
    sizeof(SHA3_224_Vector0_Msg8) - 1,
    sizeof(SHA3_224_Vector0_Msg9) - 1,
};
const uint8_t SHA3_224_hash_ref[SHA3_224_NUMBER_OF_TEST][224 / 8] = 
{
    {0xe6,0x42,0x82,0x4c,0x3f,0x8c,0xf2,0x4a,0xd0,0x92,0x34,0xee,0x7d,0x3c,0x76,0x6f,0xc9,0xa3,0xa5,0x16,0x8d,0x0c,0x94,0xad,0x73,0xb4,0x6f,0xdf},
    {0x6b,0x4e,0x03,0x42,0x36,0x67,0xdb,0xb7,0x3b,0x6e,0x15,0x45,0x4f,0x0e,0xb1,0xab,0xd4,0x59,0x7f,0x9a,0x1b,0x07,0x8e,0x3f,0x5b,0x5a,0x6b,0xc7},
    {0x8a,0x24,0x10,0x8b,0x15,0x4a,0xda,0x21,0xc9,0xfd,0x55,0x74,0x49,0x44,0x79,0xba,0x5c,0x7e,0x7a,0xb7,0x6e,0xf2,0x64,0xea,0xd0,0xfc,0xce,0x33},
    {0x54,0x3e,0x68,0x68,0xe1,0x66,0x6c,0x1a,0x64,0x36,0x30,0xdf,0x77,0x36,0x7a,0xe5,0xa6,0x2a,0x85,0x07,0x0a,0x51,0xc1,0x4c,0xbf,0x66,0x5c,0xbc},
    {0xa8,0x23,0xc3,0xf5,0x16,0x59,0xda,0x24,0xd9,0xa6,0x12,0x54,0xe9,0xf6,0x1c,0x39,0xa4,0xc8,0xf1,0x1f,0xd6,0x58,0x20,0x54,0x24,0x03,0xdd,0x1c},
    {0xb0,0xce,0x99,0x58,0x02,0xad,0xb7,0xb1,0x86,0xa3,0x87,0x47,0xc9,0x9b,0xdd,0xed,0x72,0x66,0xf9,0x4f,0x38,0xce,0x3f,0xa7,0xc7,0xe5,0x04,0xca},
    {0xb3,0x13,0xd6,0xe5,0xf8,0xe7,0xe6,0xf9,0x66,0x91,0xef,0xc1,0x2e,0x36,0x05,0xc0,0xe0,0xcf,0x4f,0x44,0x16,0x3e,0xa8,0x47,0x61,0x73,0x3c,0x22},
    {0x01,0x26,0x5f,0xc3,0xc6,0x14,0x62,0x00,0xde,0x62,0xa3,0x20,0x04,0x45,0xd1,0x33,0xf9,0x0b,0x78,0xf5,0xf4,0xdf,0xe9,0x94,0x76,0x27,0x7c,0x31},
    {0x76,0x7b,0x52,0x42,0xe0,0x66,0x79,0x62,0x48,0x9f,0x5a,0xbe,0x2b,0xcd,0xf2,0xa1,0x2f,0xbf,0xfc,0x28,0x5e,0x5f,0xba,0x2f,0x00,0x57,0x0a,0x87},
    {0x2c,0x69,0x65,0x9a,0xbb,0xc0,0xed,0xaf,0x29,0x6d,0x17,0x69,0xf2,0x32,0x2e,0x8a,0x60,0x0a,0x97,0xbe,0xf9,0xc5,0x3a,0xa6,0xe8,0x44,0x40,0x93},
};
uint8_t SHA3_224_hash[SHA3_224_NUMBER_OF_TEST][224 / 8];

/*******************************************************************************
* SHA3 256
********************************************************************************/
#define SHA3_256_NUMBER_OF_TEST (10)
const uint8_t SHA3_256_Vector0_Msg0[] = "abc";
const uint8_t SHA3_256_Vector0_Msg1[] = "";
const uint8_t SHA3_256_Vector0_Msg2[] = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
const uint8_t SHA3_256_Vector0_Msg3[] = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
const uint8_t SHA3_256_Vector0_Msg4[] = "0";        // len=1
const uint8_t SHA3_256_Vector0_Msg5[] = "00";       // len=2
const uint8_t SHA3_256_Vector0_Msg6[] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len - 1
const uint8_t SHA3_256_Vector0_Msg7[] = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // same as block len
const uint8_t SHA3_256_Vector0_Msg8[] = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len + 1
const uint8_t SHA3_256_Vector0_Msg9[] = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len x 2

const uint8_t * const SHA3_256_MsgPtr[SHA3_256_NUMBER_OF_TEST] = 
{
    SHA3_256_Vector0_Msg0,
    SHA3_256_Vector0_Msg1,
    SHA3_256_Vector0_Msg2,
    SHA3_256_Vector0_Msg3,
    SHA3_256_Vector0_Msg4,
    SHA3_256_Vector0_Msg5,
    SHA3_256_Vector0_Msg6,
    SHA3_256_Vector0_Msg7,
    SHA3_256_Vector0_Msg8,
    SHA3_256_Vector0_Msg9,
};
const uint32_t SHA3_256_MsgLen[SHA3_256_NUMBER_OF_TEST] = 
{
    sizeof(SHA3_256_Vector0_Msg0) - 1,
    sizeof(SHA3_256_Vector0_Msg1) - 1,
    sizeof(SHA3_256_Vector0_Msg2) - 1,
    sizeof(SHA3_256_Vector0_Msg3) - 1,
    sizeof(SHA3_256_Vector0_Msg4) - 1,
    sizeof(SHA3_256_Vector0_Msg5) - 1,
    sizeof(SHA3_256_Vector0_Msg6) - 1,
    sizeof(SHA3_256_Vector0_Msg7) - 1,
    sizeof(SHA3_256_Vector0_Msg8) - 1,
    sizeof(SHA3_256_Vector0_Msg9) - 1,
};
const uint8_t SHA3_256_hash_ref[SHA3_256_NUMBER_OF_TEST][256 / 8] = 
{
    {0x3a,0x98,0x5d,0xa7,0x4f,0xe2,0x25,0xb2,0x04,0x5c,0x17,0x2d,0x6b,0xd3,0x90,0xbd,0x85,0x5f,0x08,0x6e,0x3e,0x9d,0x52,0x5b,0x46,0xbf,0xe2,0x45,0x11,0x43,0x15,0x32},
    {0xa7,0xff,0xc6,0xf8,0xbf,0x1e,0xd7,0x66,0x51,0xc1,0x47,0x56,0xa0,0x61,0xd6,0x62,0xf5,0x80,0xff,0x4d,0xe4,0x3b,0x49,0xfa,0x82,0xd8,0x0a,0x4b,0x80,0xf8,0x43,0x4a},
    {0x41,0xc0,0xdb,0xa2,0xa9,0xd6,0x24,0x08,0x49,0x10,0x03,0x76,0xa8,0x23,0x5e,0x2c,0x82,0xe1,0xb9,0x99,0x8a,0x99,0x9e,0x21,0xdb,0x32,0xdd,0x97,0x49,0x6d,0x33,0x76},
    {0x91,0x6f,0x60,0x61,0xfe,0x87,0x97,0x41,0xca,0x64,0x69,0xb4,0x39,0x71,0xdf,0xdb,0x28,0xb1,0xa3,0x2d,0xc3,0x6c,0xb3,0x25,0x4e,0x81,0x2b,0xe2,0x7a,0xad,0x1d,0x18},
    {0xf9,0xe2,0xea,0xaa,0x42,0xd9,0xfe,0x9e,0x55,0x8a,0x9b,0x8e,0xf1,0xbf,0x36,0x6f,0x19,0x0a,0xac,0xaa,0x83,0xba,0xd2,0x64,0x1e,0xe1,0x06,0xe9,0x04,0x10,0x96,0xe4},
    {0x2e,0x16,0xaa,0xb4,0x83,0xcb,0x95,0x57,0x7c,0x50,0xd3,0x8c,0x8d,0x0d,0x70,0x40,0xf4,0x67,0x26,0x83,0x23,0x84,0x46,0xc9,0x90,0xba,0xbb,0xca,0x5a,0xe1,0x33,0xc8},
    {0x8c,0x3f,0x07,0x20,0x7a,0xdd,0xf7,0x79,0x65,0x95,0x3f,0x61,0x7f,0xe2,0x9e,0xce,0xfc,0x45,0x6f,0xaa,0xe7,0x7c,0xd6,0x8e,0xa5,0x26,0x3e,0xb6,0x83,0x72,0xee,0xab},
    {0x93,0x5f,0x9b,0xae,0xce,0xf4,0x6d,0x7d,0xcd,0x9e,0xaf,0x35,0xef,0xde,0x86,0xc3,0x20,0xcc,0xa2,0xa1,0x2f,0x53,0x4d,0x7b,0xa4,0xd7,0xa8,0xd1,0x68,0xf9,0x59,0x42},
    {0xd6,0x6b,0x5c,0x32,0x93,0x8e,0xe3,0xda,0x0c,0x06,0xcc,0x6b,0x22,0x88,0x71,0x45,0x2c,0x19,0xa6,0x6f,0x57,0xb0,0xec,0x64,0xdc,0x26,0xe3,0xf6,0xf3,0xa2,0xa8,0xc4},
    {0xbf,0x2d,0x6a,0xaf,0x59,0xfc,0xf5,0x0d,0x9d,0xc1,0xe2,0x93,0x75,0x68,0x1b,0xbb,0x03,0x49,0x6c,0x66,0x09,0xe2,0x43,0x42,0x34,0x14,0x9f,0xb4,0x74,0x38,0xf4,0xe3},
};
uint8_t SHA3_256_hash[SHA3_256_NUMBER_OF_TEST][256 / 8];

/*******************************************************************************
* SHA3 384
********************************************************************************/
#define SHA3_384_NUMBER_OF_TEST (10)
const uint8_t SHA3_384_Vector0_Msg0[] = "abc";
const uint8_t SHA3_384_Vector0_Msg1[] = "";
const uint8_t SHA3_384_Vector0_Msg2[] = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
const uint8_t SHA3_384_Vector0_Msg3[] = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
const uint8_t SHA3_384_Vector0_Msg4[] = "0";        // len=1
const uint8_t SHA3_384_Vector0_Msg5[] = "00";       // len=2
const uint8_t SHA3_384_Vector0_Msg6[] = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";  // block len - 1
const uint8_t SHA3_384_Vector0_Msg7[] = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // same as block len
const uint8_t SHA3_384_Vector0_Msg8[] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len + 1
const uint8_t SHA3_384_Vector0_Msg9[] = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len x 2

const uint8_t * const SHA3_384_MsgPtr[SHA3_384_NUMBER_OF_TEST] = 
{
    SHA3_384_Vector0_Msg0,
    SHA3_384_Vector0_Msg1,
    SHA3_384_Vector0_Msg2,
    SHA3_384_Vector0_Msg3,
    SHA3_384_Vector0_Msg4,
    SHA3_384_Vector0_Msg5,
    SHA3_384_Vector0_Msg6,
    SHA3_384_Vector0_Msg7,
    SHA3_384_Vector0_Msg8,
    SHA3_384_Vector0_Msg9,
};
const uint32_t SHA3_384_MsgLen[SHA3_384_NUMBER_OF_TEST] = 
{
    sizeof(SHA3_384_Vector0_Msg0) - 1,
    sizeof(SHA3_384_Vector0_Msg1) - 1,
    sizeof(SHA3_384_Vector0_Msg2) - 1,
    sizeof(SHA3_384_Vector0_Msg3) - 1,
    sizeof(SHA3_384_Vector0_Msg4) - 1,
    sizeof(SHA3_384_Vector0_Msg5) - 1,
    sizeof(SHA3_384_Vector0_Msg6) - 1,
    sizeof(SHA3_384_Vector0_Msg7) - 1,
    sizeof(SHA3_384_Vector0_Msg8) - 1,
    sizeof(SHA3_384_Vector0_Msg9) - 1,
};
const uint8_t SHA3_384_hash_ref[SHA3_384_NUMBER_OF_TEST][384 / 8] = 
{
    {0xec,0x01,0x49,0x82,0x88,0x51,0x6f,0xc9,0x26,0x45,0x9f,0x58,0xe2,0xc6,0xad,0x8d,0xf9,0xb4,0x73,0xcb,0x0f,0xc0,0x8c,0x25,0x96,0xda,0x7c,0xf0,0xe4,0x9b,0xe4,0xb2,0x98,0xd8,0x8c,0xea,0x92,0x7a,0xc7,0xf5,0x39,0xf1,0xed,0xf2,0x28,0x37,0x6d,0x25},
    {0x0c,0x63,0xa7,0x5b,0x84,0x5e,0x4f,0x7d,0x01,0x10,0x7d,0x85,0x2e,0x4c,0x24,0x85,0xc5,0x1a,0x50,0xaa,0xaa,0x94,0xfc,0x61,0x99,0x5e,0x71,0xbb,0xee,0x98,0x3a,0x2a,0xc3,0x71,0x38,0x31,0x26,0x4a,0xdb,0x47,0xfb,0x6b,0xd1,0xe0,0x58,0xd5,0xf0,0x04},
    {0x99,0x1c,0x66,0x57,0x55,0xeb,0x3a,0x4b,0x6b,0xbd,0xfb,0x75,0xc7,0x8a,0x49,0x2e,0x8c,0x56,0xa2,0x2c,0x5c,0x4d,0x7e,0x42,0x9b,0xfd,0xbc,0x32,0xb9,0xd4,0xad,0x5a,0xa0,0x4a,0x1f,0x07,0x6e,0x62,0xfe,0xa1,0x9e,0xef,0x51,0xac,0xd0,0x65,0x7c,0x22},
    {0x79,0x40,0x7d,0x3b,0x59,0x16,0xb5,0x9c,0x3e,0x30,0xb0,0x98,0x22,0x97,0x47,0x91,0xc3,0x13,0xfb,0x9e,0xcc,0x84,0x9e,0x40,0x6f,0x23,0x59,0x2d,0x04,0xf6,0x25,0xdc,0x8c,0x70,0x9b,0x98,0xb4,0x3b,0x38,0x52,0xb3,0x37,0x21,0x61,0x79,0xaa,0x7f,0xc7},
    {0x17,0xc0,0x60,0x83,0x60,0xf9,0x65,0x21,0x53,0xb4,0xbf,0x29,0x61,0x1b,0x14,0x6b,0xbb,0x7e,0xd3,0x33,0x6c,0x33,0xd9,0x44,0xc8,0xcf,0x76,0x37,0xff,0xe8,0xff,0x44,0x0b,0x3b,0x0b,0x67,0xa1,0x27,0xa1,0x83,0xa5,0xd7,0xe2,0xd9,0x78,0xf5,0x44,0xc5},
    {0xfd,0xad,0x4a,0xa0,0xd9,0xcf,0x5e,0x99,0x04,0xe5,0xe2,0x52,0xd2,0x4b,0x79,0x69,0xf3,0x6f,0x51,0x7f,0xb2,0x19,0x6d,0x18,0x44,0xa4,0xa3,0xfd,0x65,0x92,0xfb,0xe3,0x53,0x6e,0x7d,0x13,0xdb,0xfe,0x6e,0x79,0xa9,0x23,0xbd,0x30,0x1c,0xde,0x83,0x82},
    {0xe8,0xb6,0xa0,0x56,0x2c,0x4b,0x67,0x46,0x7e,0x91,0x78,0xbc,0xfe,0x3e,0x06,0x0b,0x4e,0x6f,0xda,0x8a,0xf6,0xd9,0x6d,0xef,0x76,0x75,0xf6,0xeb,0x4c,0xbe,0x9d,0x74,0x4a,0x86,0x58,0x76,0x8d,0xad,0xf2,0x1b,0x40,0xf2,0x03,0x65,0xa3,0xe6,0xb7,0x36},
    {0xc9,0x45,0x1d,0x41,0x5a,0x38,0x91,0x7a,0xa4,0xe3,0xb9,0x67,0x65,0xa8,0xed,0x74,0xc7,0xd8,0x98,0x73,0x14,0xb6,0xc2,0x0d,0x91,0xa9,0xbe,0xc9,0x78,0x08,0x17,0x98,0x27,0xac,0x98,0xbf,0x84,0xc2,0xd7,0x65,0xa5,0xae,0xa1,0x1a,0x27,0x34,0xe0,0xe0},
    {0xc4,0xdf,0x56,0x82,0x13,0x6a,0x2e,0xdf,0x97,0xee,0xdb,0x91,0x57,0x6a,0x49,0x9d,0xf1,0x6b,0xe6,0xbc,0x5e,0x60,0xdc,0xd7,0x77,0xf8,0x0d,0x6e,0x4f,0x3b,0x3b,0xf6,0x78,0x67,0x7a,0x5f,0x06,0x5f,0xf6,0x6c,0x78,0x78,0x66,0xf4,0xab,0x13,0x46,0x74},
    {0x07,0x41,0xdc,0x23,0x70,0x4a,0xc9,0x52,0xf3,0x1f,0x48,0x78,0x99,0x61,0x28,0x80,0xec,0x56,0xac,0x29,0x9a,0x5f,0x4e,0x77,0xde,0x17,0x25,0xb2,0x8e,0x8e,0x5c,0x60,0xac,0x71,0x5f,0x43,0x89,0x1b,0xc8,0x10,0x3f,0xa8,0x2b,0xcd,0x09,0x26,0xbc,0xce},
};
uint8_t SHA3_384_hash[SHA3_384_NUMBER_OF_TEST][384 / 8];

/*******************************************************************************
* SHA3 512
********************************************************************************/
#define SHA3_512_NUMBER_OF_TEST (10)
const uint8_t SHA3_512_Vector0_Msg0[] = "abc";
const uint8_t SHA3_512_Vector0_Msg1[] = "";
const uint8_t SHA3_512_Vector0_Msg2[] = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
const uint8_t SHA3_512_Vector0_Msg3[] = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
const uint8_t SHA3_512_Vector0_Msg4[] = "0";        // len=1
const uint8_t SHA3_512_Vector0_Msg5[] = "00";       // len=2
const uint8_t SHA3_512_Vector0_Msg6[] = "00000000000000000000000000000000000000000000000000000000000000000000000";  // block len - 1
const uint8_t SHA3_512_Vector0_Msg7[] = "000000000000000000000000000000000000000000000000000000000000000000000000"; // same as block len
const uint8_t SHA3_512_Vector0_Msg8[] = "0000000000000000000000000000000000000000000000000000000000000000000000000"; // block len + 1
const uint8_t SHA3_512_Vector0_Msg9[] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len x 2

const uint8_t * const SHA3_512_MsgPtr[SHA3_512_NUMBER_OF_TEST] = 
{
    SHA3_512_Vector0_Msg0,
    SHA3_512_Vector0_Msg1,
    SHA3_512_Vector0_Msg2,
    SHA3_512_Vector0_Msg3,
    SHA3_512_Vector0_Msg4,
    SHA3_512_Vector0_Msg5,
    SHA3_512_Vector0_Msg6,
    SHA3_512_Vector0_Msg7,
    SHA3_512_Vector0_Msg8,
    SHA3_512_Vector0_Msg9,
};
const uint32_t SHA3_512_MsgLen[SHA3_512_NUMBER_OF_TEST] = 
{
    sizeof(SHA3_512_Vector0_Msg0) - 1,
    sizeof(SHA3_512_Vector0_Msg1) - 1,
    sizeof(SHA3_512_Vector0_Msg2) - 1,
    sizeof(SHA3_512_Vector0_Msg3) - 1,
    sizeof(SHA3_512_Vector0_Msg4) - 1,
    sizeof(SHA3_512_Vector0_Msg5) - 1,
    sizeof(SHA3_512_Vector0_Msg6) - 1,
    sizeof(SHA3_512_Vector0_Msg7) - 1,
    sizeof(SHA3_512_Vector0_Msg8) - 1,
    sizeof(SHA3_512_Vector0_Msg9) - 1,
};
const uint8_t SHA3_512_hash_ref[SHA3_512_NUMBER_OF_TEST][512 / 8] = 
{
    {0xb7,0x51,0x85,0x0b,0x1a,0x57,0x16,0x8a,0x56,0x93,0xcd,0x92,0x4b,0x6b,0x09,0x6e,0x08,0xf6,0x21,0x82,0x74,0x44,0xf7,0x0d,0x88,0x4f,0x5d,0x02,0x40,0xd2,0x71,0x2e,0x10,0xe1,0x16,0xe9,0x19,0x2a,0xf3,0xc9,0x1a,0x7e,0xc5,0x76,0x47,0xe3,0x93,0x40,0x57,0x34,0x0b,0x4c,0xf4,0x08,0xd5,0xa5,0x65,0x92,0xf8,0x27,0x4e,0xec,0x53,0xf0},
    {0xa6,0x9f,0x73,0xcc,0xa2,0x3a,0x9a,0xc5,0xc8,0xb5,0x67,0xdc,0x18,0x5a,0x75,0x6e,0x97,0xc9,0x82,0x16,0x4f,0xe2,0x58,0x59,0xe0,0xd1,0xdc,0xc1,0x47,0x5c,0x80,0xa6,0x15,0xb2,0x12,0x3a,0xf1,0xf5,0xf9,0x4c,0x11,0xe3,0xe9,0x40,0x2c,0x3a,0xc5,0x58,0xf5,0x00,0x19,0x9d,0x95,0xb6,0xd3,0xe3,0x01,0x75,0x85,0x86,0x28,0x1d,0xcd,0x26},
    {0x04,0xa3,0x71,0xe8,0x4e,0xcf,0xb5,0xb8,0xb7,0x7c,0xb4,0x86,0x10,0xfc,0xa8,0x18,0x2d,0xd4,0x57,0xce,0x6f,0x32,0x6a,0x0f,0xd3,0xd7,0xec,0x2f,0x1e,0x91,0x63,0x6d,0xee,0x69,0x1f,0xbe,0x0c,0x98,0x53,0x02,0xba,0x1b,0x0d,0x8d,0xc7,0x8c,0x08,0x63,0x46,0xb5,0x33,0xb4,0x9c,0x03,0x0d,0x99,0xa2,0x7d,0xaf,0x11,0x39,0xd6,0xe7,0x5e},
    {0xaf,0xeb,0xb2,0xef,0x54,0x2e,0x65,0x79,0xc5,0x0c,0xad,0x06,0xd2,0xe5,0x78,0xf9,0xf8,0xdd,0x68,0x81,0xd7,0xdc,0x82,0x4d,0x26,0x36,0x0f,0xee,0xbf,0x18,0xa4,0xfa,0x73,0xe3,0x26,0x11,0x22,0x94,0x8e,0xfc,0xfd,0x49,0x2e,0x74,0xe8,0x2e,0x21,0x89,0xed,0x0f,0xb4,0x40,0xd1,0x87,0xf3,0x82,0x27,0x0c,0xb4,0x55,0xf2,0x1d,0xd1,0x85},
    {0x2d,0x44,0xda,0x53,0xf3,0x05,0xab,0x94,0xb6,0x36,0x58,0x37,0xb9,0x80,0x36,0x27,0xab,0x09,0x8c,0x41,0xa6,0x01,0x36,0x94,0xf9,0xb4,0x68,0xbc,0xcb,0x9c,0x13,0xe9,0x5b,0x39,0x00,0x36,0x5e,0xb5,0x89,0x24,0xde,0x71,0x58,0xa5,0x44,0x67,0xe9,0x84,0xef,0xcf,0xda,0xbd,0xbc,0xc9,0xaf,0x9a,0x94,0x0d,0x49,0xc5,0x14,0x55,0xb0,0x4c},
    {0x74,0x2b,0x02,0xa2,0x8f,0x25,0xe4,0x85,0x81,0xa1,0x2b,0xd7,0xb6,0xcf,0x6b,0xde,0x3a,0xc9,0xcd,0x3c,0x55,0x76,0x15,0x50,0x1d,0x13,0x66,0x78,0xe7,0x33,0x78,0x47,0xe9,0x51,0xb9,0x45,0x87,0xf4,0x59,0x27,0x08,0x0f,0xcc,0x6d,0x46,0x5f,0x23,0x6f,0x6a,0x6d,0xac,0x30,0x49,0x34,0x8a,0xf9,0xe7,0x67,0x7a,0x04,0x04,0xaa,0x2f,0x1a},
    {0x2b,0xda,0xca,0x04,0xf7,0x8a,0xe2,0x16,0x33,0x15,0x57,0x35,0x8d,0x12,0x4c,0x0b,0x79,0x30,0x57,0x35,0xe5,0xa6,0x5f,0xa9,0x1a,0x8d,0x65,0x04,0xc9,0x2f,0xe1,0xa7,0x80,0xee,0x99,0x2a,0x5f,0x02,0x33,0xda,0xd0,0xb7,0x98,0x75,0x33,0x3a,0x40,0xd1,0xc2,0x6d,0x43,0x56,0x84,0x44,0x24,0x92,0xad,0x1e,0x31,0x66,0xef,0x19,0x80,0x9b},
    {0x69,0xeb,0x8c,0xcd,0xe4,0xee,0xc5,0x7d,0x5e,0x78,0x51,0x2b,0xf2,0x90,0x81,0xdc,0x15,0xd3,0xca,0x65,0x0d,0x5b,0xf1,0x5c,0xc9,0xc0,0xdf,0xd7,0xd7,0xc4,0x77,0xc0,0x67,0x50,0x4f,0xb9,0x9c,0x7c,0x78,0x7d,0xf2,0x48,0xa9,0x89,0x7c,0xbe,0xae,0xaf,0xea,0xe5,0x63,0xe8,0x55,0x20,0x56,0x60,0x36,0x3d,0xd7,0x00,0xe1,0xd4,0x3e,0xee},
    {0xae,0x2b,0xfc,0x79,0x22,0xe2,0xa3,0x5e,0xf3,0xd3,0xc6,0x71,0x13,0x92,0x61,0xe0,0xce,0xcb,0x41,0xc2,0xd0,0x49,0xf8,0x5f,0xb9,0xce,0x6d,0x51,0x83,0x65,0x80,0x27,0x19,0x67,0x02,0xe2,0xb2,0x27,0xe0,0x68,0x0f,0xdb,0x44,0xc0,0xeb,0xab,0xbb,0x6b,0xe9,0x88,0x23,0xb8,0xb4,0x65,0x9b,0xc9,0x96,0x25,0xfb,0xb2,0xf8,0x41,0x51,0xcc},
    {0x59,0xa2,0x48,0x7c,0x6e,0x43,0xf5,0xb7,0xdd,0x01,0x50,0xc9,0x7b,0xa6,0x58,0x83,0x14,0x68,0xb7,0x70,0x3a,0x98,0x14,0x06,0xc9,0x1c,0x00,0xd6,0xab,0x23,0x28,0x76,0xa1,0x0d,0x8c,0xeb,0xb1,0xa0,0xf6,0x8d,0x55,0x37,0x94,0x79,0xef,0xa9,0xe9,0xfb,0x09,0xd1,0xe9,0x19,0x65,0x29,0xff,0x2b,0x64,0x3d,0xef,0xae,0x88,0xcb,0xa2,0x0a},
};
uint8_t SHA3_512_hash[SHA3_512_NUMBER_OF_TEST][512 / 8];

/*******************************************************************************
* SHAKE128
********************************************************************************/
#define SHAKE128_NUMBER_OF_TEST (10)
const uint8_t SHAKE128_Vector0_Msg0[] = "abc";
const uint8_t SHAKE128_Vector0_Msg1[] = "";
const uint8_t SHAKE128_Vector0_Msg2[] = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
const uint8_t SHAKE128_Vector0_Msg3[] = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
const uint8_t SHAKE128_Vector0_Msg4[] = "0";        // len=1
const uint8_t SHAKE128_Vector0_Msg5[] = "00";       // len=2
const uint8_t SHAKE128_Vector0_Msg6[] = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";  // block len - 1
const uint8_t SHAKE128_Vector0_Msg7[] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // same as block len
const uint8_t SHAKE128_Vector0_Msg8[] = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len + 1
const uint8_t SHAKE128_Vector0_Msg9[] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len x 2

const uint8_t * const SHAKE128_MsgPtr[SHAKE128_NUMBER_OF_TEST] = 
{
    SHAKE128_Vector0_Msg0,
    SHAKE128_Vector0_Msg1,
    SHAKE128_Vector0_Msg2,
    SHAKE128_Vector0_Msg3,
    SHAKE128_Vector0_Msg4,
    SHAKE128_Vector0_Msg5,
    SHAKE128_Vector0_Msg6,
    SHAKE128_Vector0_Msg7,
    SHAKE128_Vector0_Msg8,
    SHAKE128_Vector0_Msg9,
};
const uint32_t SHAKE128_MsgLen[SHAKE128_NUMBER_OF_TEST] = 
{
    sizeof(SHAKE128_Vector0_Msg0) - 1,
    sizeof(SHAKE128_Vector0_Msg1) - 1,
    sizeof(SHAKE128_Vector0_Msg2) - 1,
    sizeof(SHAKE128_Vector0_Msg3) - 1,
    sizeof(SHAKE128_Vector0_Msg4) - 1,
    sizeof(SHAKE128_Vector0_Msg5) - 1,
    sizeof(SHAKE128_Vector0_Msg6) - 1,
    sizeof(SHAKE128_Vector0_Msg7) - 1,
    sizeof(SHAKE128_Vector0_Msg8) - 1,
    sizeof(SHAKE128_Vector0_Msg9) - 1,
};
const uint8_t SHAKE128_hash_ref[SHAKE128_NUMBER_OF_TEST][256 / 8] = 
{
    {0x58,0x81,0x09,0x2d,0xd8,0x18,0xbf,0x5c,0xf8,0xa3,0xdd,0xb7,0x93,0xfb,0xcb,0xa7,0x40,0x97,0xd5,0xc5,0x26,0xa6,0xd3,0x5f,0x97,0xb8,0x33,0x51,0x94,0x0f,0x2c,0xc8},
    {0x7f,0x9c,0x2b,0xa4,0xe8,0x8f,0x82,0x7d,0x61,0x60,0x45,0x50,0x76,0x05,0x85,0x3e,0xd7,0x3b,0x80,0x93,0xf6,0xef,0xbc,0x88,0xeb,0x1a,0x6e,0xac,0xfa,0x66,0xef,0x26},
    {0x1a,0x96,0x18,0x2b,0x50,0xfb,0x8c,0x7e,0x74,0xe0,0xa7,0x07,0x78,0x8f,0x55,0xe9,0x82,0x09,0xb8,0xd9,0x1f,0xad,0xe8,0xf3,0x2f,0x8d,0xd5,0xcf,0xf7,0xbf,0x21,0xf5},
    {0x7b,0x6d,0xf6,0xff,0x18,0x11,0x73,0xb6,0xd7,0x89,0x8d,0x7f,0xf6,0x3f,0xb0,0x7b,0x7c,0x23,0x7d,0xaf,0x47,0x1a,0x5a,0xe5,0x60,0x2a,0xdb,0xcc,0xef,0x9c,0xcf,0x4b},
    {0x62,0x8e,0x79,0xcf,0x79,0x48,0xcd,0x1c,0xa1,0x56,0xce,0xe7,0x63,0x1a,0x34,0x46,0xbc,0x21,0xd4,0x94,0x7e,0x0b,0xe5,0x5c,0x80,0x3a,0x0d,0x5c,0x40,0x38,0x0b,0x4b},
    {0x89,0xfe,0xba,0x6a,0x1e,0xdf,0x6c,0x0e,0xf9,0x64,0xef,0x0a,0xa5,0xb9,0x8c,0x36,0x90,0x92,0xe4,0x16,0x40,0xe4,0x6e,0x0d,0x96,0xa1,0x60,0xdc,0x5d,0x5f,0x14,0x4e},
    {0xff,0x60,0xb0,0x51,0x6f,0xb8,0xa3,0xd4,0x03,0x29,0x00,0x97,0x6e,0x98,0xb5,0x59,0x5f,0x57,0xe9,0xd4,0xa8,0x8a,0x0e,0x37,0xf7,0xcc,0x5a,0xdf,0xa3,0xc4,0x7d,0xa2},
    {0x39,0xeb,0xc9,0xa5,0xdf,0x5c,0x81,0xa4,0x6d,0x8a,0x6f,0x54,0x33,0x26,0x34,0x86,0x95,0xff,0x59,0xd0,0xdd,0x10,0xe0,0x20,0xb5,0x3c,0xb4,0x9a,0x1c,0x15,0x32,0xe4},
    {0xa3,0xb4,0xe7,0x21,0xdb,0x62,0xce,0x75,0x1f,0x38,0xf2,0x81,0x90,0xe3,0x2d,0xd8,0x47,0x09,0xa8,0x54,0xe9,0xac,0x2d,0x62,0x7d,0x15,0x11,0xd0,0x5f,0x16,0x51,0xfa},
    {0x14,0x34,0x3f,0x17,0xc2,0xcc,0x3b,0x98,0x6a,0x44,0xea,0xa5,0xfd,0xf3,0x20,0xc5,0xc3,0x36,0xe0,0x5d,0x71,0xb8,0xe5,0x10,0xfb,0xdc,0x20,0x96,0x8b,0x05,0x3e,0x3c},
};
uint8_t SHAKE128_hash[SHAKE128_NUMBER_OF_TEST][256 / 8];

/*******************************************************************************
* SHAKE256
********************************************************************************/
#define SHAKE256_NUMBER_OF_TEST (10)
const uint8_t SHAKE256_Vector0_Msg0[] = "abc";
const uint8_t SHAKE256_Vector0_Msg1[] = "";
const uint8_t SHAKE256_Vector0_Msg2[] = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
const uint8_t SHAKE256_Vector0_Msg3[] = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
const uint8_t SHAKE256_Vector0_Msg4[] = "0";        // len=1
const uint8_t SHAKE256_Vector0_Msg5[] = "00";       // len=2
const uint8_t SHAKE256_Vector0_Msg6[] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";  // block len - 1
const uint8_t SHAKE256_Vector0_Msg7[] = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // same as block len
const uint8_t SHAKE256_Vector0_Msg8[] = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len + 1
const uint8_t SHAKE256_Vector0_Msg9[] = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"; // block len x 2

const uint8_t * const SHAKE256_MsgPtr[SHAKE256_NUMBER_OF_TEST] = 
{
    SHAKE256_Vector0_Msg0,
    SHAKE256_Vector0_Msg1,
    SHAKE256_Vector0_Msg2,
    SHAKE256_Vector0_Msg3,
    SHAKE256_Vector0_Msg4,
    SHAKE256_Vector0_Msg5,
    SHAKE256_Vector0_Msg6,
    SHAKE256_Vector0_Msg7,
    SHAKE256_Vector0_Msg8,
    SHAKE256_Vector0_Msg9,
};
const uint32_t SHAKE256_MsgLen[SHAKE256_NUMBER_OF_TEST] = 
{
    sizeof(SHAKE256_Vector0_Msg0) - 1,
    sizeof(SHAKE256_Vector0_Msg1) - 1,
    sizeof(SHAKE256_Vector0_Msg2) - 1,
    sizeof(SHAKE256_Vector0_Msg3) - 1,
    sizeof(SHAKE256_Vector0_Msg4) - 1,
    sizeof(SHAKE256_Vector0_Msg5) - 1,
    sizeof(SHAKE256_Vector0_Msg6) - 1,
    sizeof(SHAKE256_Vector0_Msg7) - 1,
    sizeof(SHAKE256_Vector0_Msg8) - 1,
    sizeof(SHAKE256_Vector0_Msg9) - 1,
};
const uint8_t SHAKE256_hash_ref[SHAKE256_NUMBER_OF_TEST][512 / 8] = 
{
    {0x48,0x33,0x66,0x60,0x13,0x60,0xa8,0x77,0x1c,0x68,0x63,0x08,0x0c,0xc4,0x11,0x4d,0x8d,0xb4,0x45,0x30,0xf8,0xf1,0xe1,0xee,0x4f,0x94,0xea,0x37,0xe7,0x8b,0x57,0x39,0xd5,0xa1,0x5b,0xef,0x18,0x6a,0x53,0x86,0xc7,0x57,0x44,0xc0,0x52,0x7e,0x1f,0xaa,0x9f,0x87,0x26,0xe4,0x62,0xa1,0x2a,0x4f,0xeb,0x06,0xbd,0x88,0x01,0xe7,0x51,0xe4},
    {0x46,0xb9,0xdd,0x2b,0x0b,0xa8,0x8d,0x13,0x23,0x3b,0x3f,0xeb,0x74,0x3e,0xeb,0x24,0x3f,0xcd,0x52,0xea,0x62,0xb8,0x1b,0x82,0xb5,0x0c,0x27,0x64,0x6e,0xd5,0x76,0x2f,0xd7,0x5d,0xc4,0xdd,0xd8,0xc0,0xf2,0x00,0xcb,0x05,0x01,0x9d,0x67,0xb5,0x92,0xf6,0xfc,0x82,0x1c,0x49,0x47,0x9a,0xb4,0x86,0x40,0x29,0x2e,0xac,0xb3,0xb7,0xc4,0xbe},
    {0x4d,0x8c,0x2d,0xd2,0x43,0x5a,0x01,0x28,0xee,0xfb,0xb8,0xc3,0x6f,0x6f,0x87,0x13,0x3a,0x79,0x11,0xe1,0x8d,0x97,0x9e,0xe1,0xae,0x6b,0xe5,0xd4,0xfd,0x2e,0x33,0x29,0x40,0xd8,0x68,0x8a,0x4e,0x6a,0x59,0xaa,0x80,0x60,0xf1,0xf9,0xbc,0x99,0x6c,0x05,0xac,0xa3,0xc6,0x96,0xa8,0xb6,0x62,0x79,0xdc,0x67,0x2c,0x74,0x0b,0xb2,0x24,0xec},
    {0x98,0xbe,0x04,0x51,0x6c,0x04,0xcc,0x73,0x59,0x3f,0xef,0x3e,0xd0,0x35,0x2e,0xa9,0xf6,0x44,0x39,0x42,0xd6,0x95,0x0e,0x29,0xa3,0x72,0xa6,0x81,0xc3,0xde,0xaf,0x45,0x35,0x42,0x37,0x09,0xb0,0x28,0x43,0x94,0x86,0x84,0xe0,0x29,0x01,0x0b,0xad,0xcc,0x0a,0xcd,0x83,0x03,0xfc,0x85,0xfd,0xad,0x3e,0xab,0xf4,0xf7,0x8c,0xae,0x16,0x56},
    {0x7e,0x8b,0x14,0x06,0xd9,0x03,0xbc,0x91,0x37,0xfb,0x69,0xe7,0x69,0x74,0x2c,0x8d,0x3e,0x36,0xf1,0xc4,0xfe,0xd5,0x1a,0x60,0x88,0x09,0xb0,0x8d,0xe9,0xf3,0xe4,0xa0,0x49,0x06,0x48,0x54,0x5b,0x3b,0x19,0x6b,0x0f,0x22,0x4c,0x2a,0xd3,0x7c,0x66,0xf6,0x8f,0xad,0x19,0x1d,0x7d,0x2d,0x78,0x3e,0x34,0x1c,0x3d,0xc7,0x5e,0xb6,0xf4,0x21},
    {0xca,0x64,0x7e,0x59,0x5e,0x25,0x99,0xfd,0x53,0x23,0x14,0xd3,0xf0,0x0e,0xc9,0xe2,0xcb,0x2f,0x37,0x78,0xab,0xef,0xf5,0x0f,0xba,0xfa,0xc6,0xe9,0xfd,0x41,0xeb,0xc9,0xdc,0xf7,0xcd,0x2d,0x0b,0x3f,0xc2,0x0a,0x35,0x92,0x63,0x3f,0xff,0x13,0x75,0x2a,0x87,0xa9,0x9f,0xa3,0x8b,0xea,0xb1,0xc3,0xe2,0xab,0x09,0x7e,0x1d,0xa6,0xef,0xe2},
    {0xab,0x11,0xf6,0x1b,0x50,0x85,0xa1,0x08,0xa5,0x86,0x70,0xa6,0x67,0x38,0xea,0x7a,0x8d,0x8c,0xe2,0x3b,0x7c,0x57,0xd6,0x4d,0xe8,0x3e,0xaa,0xfb,0x10,0x92,0x3c,0xf8,0x5d,0xf5,0xcb,0x06,0x24,0xc1,0x95,0x46,0x84,0x83,0xa7,0xff,0xb7,0x24,0x08,0x39,0xb7,0xf2,0x44,0xfd,0x21,0x65,0x55,0x84,0x8e,0x10,0x94,0x39,0xfc,0x0e,0x54,0x3d},
    {0xe8,0x50,0x7a,0xb4,0xfe,0xc1,0x72,0xd8,0xe8,0xeb,0xf9,0x51,0x34,0xe3,0xd1,0x83,0xb6,0x31,0x66,0x9e,0xa7,0x5d,0x01,0x5f,0x89,0xb9,0x45,0x6f,0x30,0x5f,0xb6,0x34,0xbc,0x9d,0x43,0xff,0x53,0xac,0xbc,0x5e,0x66,0x30,0x00,0xbd,0x69,0x8d,0xcb,0x6b,0x96,0x24,0x39,0x14,0x70,0x19,0x01,0x1b,0x20,0xea,0xe8,0x55,0x23,0x06,0xbc,0xac},
    {0xa6,0x1b,0x94,0xfd,0x86,0x0f,0x15,0xbb,0x7c,0xc4,0xd8,0xe1,0xe5,0xda,0x6a,0x75,0x39,0x05,0xdc,0x6d,0xa2,0x8b,0x42,0x5e,0x69,0x92,0xed,0x5e,0xab,0xec,0x9a,0xe3,0x4e,0xc9,0x5e,0x8f,0xa7,0xa7,0x76,0xe0,0x91,0x95,0xb6,0x11,0x18,0xb2,0x9b,0x0a,0x09,0xcf,0x09,0x0a,0x48,0x52,0x00,0x5c,0xb9,0xfa,0x04,0x34,0xc1,0x74,0xec,0x6d},
    {0x71,0xae,0xed,0x73,0x7c,0x2b,0xef,0x78,0x19,0xeb,0x0b,0x48,0x54,0xe6,0x56,0x16,0x2f,0x86,0xdf,0x39,0x02,0xbe,0x6e,0xa1,0xcc,0x81,0x16,0x99,0x8a,0xac,0x62,0x10,0x33,0x1f,0x14,0x63,0x16,0xc2,0x56,0xb7,0xee,0x4e,0x7c,0x74,0x26,0xf2,0x37,0xb1,0x8a,0x42,0x35,0x1e,0x9d,0x3d,0x17,0x62,0x0a,0x27,0x6b,0x75,0x68,0xcd,0xa4,0x91},
};
uint8_t SHAKE256_hash[SHAKE256_NUMBER_OF_TEST][512 / 8];

#endif

#endif

