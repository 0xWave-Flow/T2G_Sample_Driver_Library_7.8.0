/***************************************************************************//**
* \file crypto_sha1_test_vector.h
*
* \version 1.0
*
* \brief Supporting example file
*
********************************************************************************
* \copyright
* Copyright 2016-2020, Cypress Semiconductor Corporation. All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#ifndef __CRYPTO_SHA1_TEST_VECTOR__
#define __CRYPTO_SHA1_TEST_VECTOR__

#ifdef __CRYPTO_ENABLE_TEST_VECTOR__

/* Refer https://www.cosic.esat.kuleuven.be/nessie/testvectors/ */
/*******************************************************************************
* SHA1
********************************************************************************/
#define SHA1_NUMBER_OF_TEST (12)
const uint8_t SHA1_Vector0_Msg0[] = "";
const uint8_t SHA1_Vector0_Msg1[] = "a";
const uint8_t SHA1_Vector0_Msg2[] = "abc";
const uint8_t SHA1_Vector0_Msg3[] = "message digest";
const uint8_t SHA1_Vector0_Msg4[] = "abcdefghijklmnopqrstuvwxyz";
const uint8_t SHA1_Vector0_Msg5[] = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
const uint8_t SHA1_Vector0_Msg6[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
const uint8_t SHA1_Vector0_Msg7[] = "12345678901234567890123456789012345678901234567890123456789012345678901234567890";
const uint8_t SHA1_Vector0_Msg8[512/8 - 1] = { 0u };        // block length - 1
const uint8_t SHA1_Vector0_Msg9[512/8] = { 0u };            // block length
const uint8_t SHA1_Vector0_Msg10[512/8 + 1] = { 0u };       // block length + 1
const uint8_t SHA1_Vector0_Msg11[512/8 * 2 - 1] = { 0u };   // 2 x block length - 1

const uint8_t * const SHA1_MsgPtr[SHA1_NUMBER_OF_TEST] = 
{
    SHA1_Vector0_Msg0,
    SHA1_Vector0_Msg1,
    SHA1_Vector0_Msg2,
    SHA1_Vector0_Msg3,
    SHA1_Vector0_Msg4,
    SHA1_Vector0_Msg5,
    SHA1_Vector0_Msg6,
    SHA1_Vector0_Msg7,
    SHA1_Vector0_Msg8,
    SHA1_Vector0_Msg9,
    SHA1_Vector0_Msg10,
    SHA1_Vector0_Msg11,
};
const uint32_t SHA1_MsgLen[SHA1_NUMBER_OF_TEST] = 
{
    sizeof(SHA1_Vector0_Msg0) / sizeof(SHA1_Vector0_Msg0[0]) - 1,
    sizeof(SHA1_Vector0_Msg1) / sizeof(SHA1_Vector0_Msg1[0]) - 1,
    sizeof(SHA1_Vector0_Msg2) / sizeof(SHA1_Vector0_Msg2[0]) - 1,
    sizeof(SHA1_Vector0_Msg3) / sizeof(SHA1_Vector0_Msg3[0]) - 1,
    sizeof(SHA1_Vector0_Msg4) / sizeof(SHA1_Vector0_Msg4[0]) - 1,
    sizeof(SHA1_Vector0_Msg5) / sizeof(SHA1_Vector0_Msg5[0]) - 1,
    sizeof(SHA1_Vector0_Msg6) / sizeof(SHA1_Vector0_Msg6[0]) - 1,
    sizeof(SHA1_Vector0_Msg7) / sizeof(SHA1_Vector0_Msg7[0]) - 1,
    sizeof(SHA1_Vector0_Msg8) / sizeof(SHA1_Vector0_Msg8[0]),
    sizeof(SHA1_Vector0_Msg9) / sizeof(SHA1_Vector0_Msg9[0]),
    sizeof(SHA1_Vector0_Msg10) / sizeof(SHA1_Vector0_Msg10[0]),
    sizeof(SHA1_Vector0_Msg11) / sizeof(SHA1_Vector0_Msg11[0]),
};
const uint8_t SHA1_hash_ref[SHA1_NUMBER_OF_TEST][160 / 8] = 
{
    {0xDA,0x39,0xA3,0xEE,0x5E,0x6B,0x4B,0x0D,0x32,0x55,0xBF,0xEF,0x95,0x60,0x18,0x90,0xAF,0xD8,0x07,0x09},
    {0x86,0xF7,0xE4,0x37,0xFA,0xA5,0xA7,0xFC,0xE1,0x5D,0x1D,0xDC,0xB9,0xEA,0xEA,0xEA,0x37,0x76,0x67,0xB8},
    {0xA9,0x99,0x3E,0x36,0x47,0x06,0x81,0x6A,0xBA,0x3E,0x25,0x71,0x78,0x50,0xC2,0x6C,0x9C,0xD0,0xD8,0x9D},
    {0xC1,0x22,0x52,0xCE,0xDA,0x8B,0xE8,0x99,0x4D,0x5F,0xA0,0x29,0x0A,0x47,0x23,0x1C,0x1D,0x16,0xAA,0xE3},
    {0x32,0xD1,0x0C,0x7B,0x8C,0xF9,0x65,0x70,0xCA,0x04,0xCE,0x37,0xF2,0xA1,0x9D,0x84,0x24,0x0D,0x3A,0x89},
    {0x84,0x98,0x3E,0x44,0x1C,0x3B,0xD2,0x6E,0xBA,0xAE,0x4A,0xA1,0xF9,0x51,0x29,0xE5,0xE5,0x46,0x70,0xF1},
    {0x76,0x1C,0x45,0x7B,0xF7,0x3B,0x14,0xD2,0x7E,0x9E,0x92,0x65,0xC4,0x6F,0x4B,0x4D,0xDA,0x11,0xF9,0x40},
    {0x50,0xAB,0xF5,0x70,0x6A,0x15,0x09,0x90,0xA0,0x8B,0x2C,0x5E,0xA4,0x0F,0xA0,0xE5,0x85,0x55,0x47,0x32},
    {0x0B,0x8B,0xF9,0xFC,0x37,0xAD,0x80,0x2C,0xEF,0xA6,0x73,0x3E,0xC6,0x2B,0x09,0xD5,0xF4,0x3A,0x1B,0x75},
    {0xC8,0xD7,0xD0,0xEF,0x0E,0xED,0xFA,0x82,0xD2,0xEA,0x1A,0xA5,0x92,0x84,0x5B,0x9A,0x6D,0x4B,0x02,0xB7},
    {0xF0,0xFA,0x45,0x90,0x6B,0xD0,0xF4,0xC3,0x66,0x8F,0xCD,0x0D,0x8F,0x68,0xD4,0xB2,0x98,0xB3,0x0E,0x5B},
    {0x60,0x53,0xD7,0x61,0x08,0x4E,0x9E,0xB4,0xEC,0x12,0x81,0x01,0x10,0xDE,0x07,0xE7,0x32,0x07,0x87,0xB6},
};
uint8_t SHA1_hash[SHA1_NUMBER_OF_TEST][160 / 8];
#endif

#endif

