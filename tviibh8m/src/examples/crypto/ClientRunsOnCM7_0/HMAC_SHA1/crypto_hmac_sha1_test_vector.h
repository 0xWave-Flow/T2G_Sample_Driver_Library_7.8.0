/***************************************************************************//**
* \file crypto_hmac_sha1_test_vector.h
*
* \version 1.0
*
* \brief Supporting example file
*
********************************************************************************
* \copyright
* Copyright 2016-2020, Cypress Semiconductor Corporation. All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#ifndef __CRYPTO_HMAC_SHA1_TEST_VECTOR__
#define __CRYPTO_HMAC_SHA1_TEST_VECTOR__

#ifdef __CRYPTO_ENABLE_TEST_VECTOR__

/* http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/HMAC_SHA1.pdf */
/* https://tools.ietf.org/html/rfc2202 */
/*******************************************************************************
* HMAC-SHA-1
********************************************************************************/
#define HMAC_SHA1_NUMBER_OF_TEST (13)

const uint8_t HMAC_SHA1_Vector0_Msg0[] = "Sample message for keylen=blocklen";
const uint8_t HMAC_SHA1_Vector0_Msg1[] = "Sample message for keylen<blocklen";
const uint8_t HMAC_SHA1_Vector0_Msg2[] = "Sample message for keylen=blocklen";
const uint8_t HMAC_SHA1_Vector0_Msg3[] = "Sample message for keylen<blocklen, with truncated tag";

const uint8_t HMAC_SHA1_Vector0_Msg4[] = "Hi There";
const uint8_t HMAC_SHA1_Vector0_Msg5[] = "what do ya want for nothing?";
const uint8_t HMAC_SHA1_Vector0_Msg6[] = "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd";
const uint8_t HMAC_SHA1_Vector0_Msg7[] = "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd";
const uint8_t HMAC_SHA1_Vector0_Msg8[] = "Test With Truncation";
const uint8_t HMAC_SHA1_Vector0_Msg9[] = "Test Using Larger Than Block-Size Key - Hash Key First";
const uint8_t HMAC_SHA1_Vector0_Msg10[] = "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data";
const uint8_t HMAC_SHA1_Vector0_Msg11[] = "Test Using Larger Than Block-Size Key - Hash Key First";
const uint8_t HMAC_SHA1_Vector0_Msg12[] = "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data";

const uint8_t * const HMAC_SHA1_MsgPtr[HMAC_SHA1_NUMBER_OF_TEST] = 
{
    HMAC_SHA1_Vector0_Msg0,
    HMAC_SHA1_Vector0_Msg1,
    HMAC_SHA1_Vector0_Msg2,
    HMAC_SHA1_Vector0_Msg3,
    HMAC_SHA1_Vector0_Msg4,
    HMAC_SHA1_Vector0_Msg5,
    HMAC_SHA1_Vector0_Msg6,
    HMAC_SHA1_Vector0_Msg7,
    HMAC_SHA1_Vector0_Msg8,
    HMAC_SHA1_Vector0_Msg9,
    HMAC_SHA1_Vector0_Msg10,
    HMAC_SHA1_Vector0_Msg11,
    HMAC_SHA1_Vector0_Msg12,
};
const uint32_t HMAC_SHA1_MsgLen[HMAC_SHA1_NUMBER_OF_TEST] = 
{
    sizeof(HMAC_SHA1_Vector0_Msg0) / sizeof(HMAC_SHA1_Vector0_Msg0[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg1) / sizeof(HMAC_SHA1_Vector0_Msg1[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg2) / sizeof(HMAC_SHA1_Vector0_Msg2[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg3) / sizeof(HMAC_SHA1_Vector0_Msg3[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg4) / sizeof(HMAC_SHA1_Vector0_Msg4[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg5) / sizeof(HMAC_SHA1_Vector0_Msg5[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg6) / sizeof(HMAC_SHA1_Vector0_Msg6[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg7) / sizeof(HMAC_SHA1_Vector0_Msg7[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg8) / sizeof(HMAC_SHA1_Vector0_Msg8[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg9) / sizeof(HMAC_SHA1_Vector0_Msg9[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg10) / sizeof(HMAC_SHA1_Vector0_Msg10[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg11) / sizeof(HMAC_SHA1_Vector0_Msg11[0]) - 1,
    sizeof(HMAC_SHA1_Vector0_Msg12) / sizeof(HMAC_SHA1_Vector0_Msg12[0]) - 1,
};
const uint8_t HMAC_SHA1_Vector0_Key0[] = 
{
    0x00,0x01,0x02,0x03, 0x04,0x05,0x06,0x07, 0x08,0x09,0x0A,0x0B, 0x0C,0x0D,0x0E,0x0F,
    0x10,0x11,0x12,0x13, 0x14,0x15,0x16,0x17, 0x18,0x19,0x1A,0x1B, 0x1C,0x1D,0x1E,0x1F, 0x20,0x21,0x22,0x23, 0x24,0x25,0x26,0x27,
    0x28,0x29,0x2A,0x2B, 0x2C,0x2D,0x2E,0x2F, 0x30,0x31,0x32,0x33, 0x34,0x35,0x36,0x37, 0x38,0x39,0x3A,0x3B, 0x3C,0x3D,0x3E,0x3F, 
};
const uint8_t HMAC_SHA1_Vector0_Key1[] = 
{
    0x00,0x01,0x02,0x03, 0x04,0x05,0x06,0x07, 0x08,0x09,0x0A,0x0B, 0x0C,0x0D,0x0E,0x0F, 0x10,0x11,0x12,0x13,
};
const uint8_t HMAC_SHA1_Vector0_Key2[] = 
{
    0x00,0x01,0x02,0x03,
    0x04,0x05,0x06,0x07, 0x08,0x09,0x0A,0x0B, 0x0C,0x0D,0x0E,0x0F, 0x10,0x11,0x12,0x13, 0x14,0x15,0x16,0x17, 0x18,0x19,0x1A,0x1B,
    0x1C,0x1D,0x1E,0x1F, 0x20,0x21,0x22,0x23, 0x24,0x25,0x26,0x27, 0x28,0x29,0x2A,0x2B, 0x2C,0x2D,0x2E,0x2F, 0x30,0x31,0x32,0x33,
    0x34,0x35,0x36,0x37, 0x38,0x39,0x3A,0x3B, 0x3C,0x3D,0x3E,0x3F, 0x40,0x41,0x42,0x43, 0x44,0x45,0x46,0x47, 0x48,0x49,0x4A,0x4B,
    0x4C,0x4D,0x4E,0x4F, 0x50,0x51,0x52,0x53, 0x54,0x55,0x56,0x57, 0x58,0x59,0x5A,0x5B, 0x5C,0x5D,0x5E,0x5F, 0x60,0x61,0x62,0x63, 
};
const uint8_t HMAC_SHA1_Vector0_Key3[] =
{
    0x00,
    0x01,0x02,0x03,0x04, 0x05,0x06,0x07,0x08, 0x09,0x0A,0x0B,0x0C, 0x0D,0x0E,0x0F,0x10, 0x11,0x12,0x13,0x14, 0x15,0x16,0x17,0x18,
    0x19,0x1A,0x1B,0x1C, 0x1D,0x1E,0x1F,0x20, 0x21,0x22,0x23,0x24, 0x25,0x26,0x27,0x28, 0x29,0x2A,0x2B,0x2C, 0x2D,0x2E,0x2F,0x30,
};
const uint8_t HMAC_SHA1_Vector0_Key4[] = 
{
    0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,
};
const uint8_t HMAC_SHA1_Vector0_Key5[] =
{
    0x4a,0x65,0x66,0x65,
};
const uint8_t HMAC_SHA1_Vector0_Key6[] =
{
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
};
const uint8_t HMAC_SHA1_Vector0_Key7[] =
{
    0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,
};
const uint8_t HMAC_SHA1_Vector0_Key8[] =
{
    0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,
};
const uint8_t HMAC_SHA1_Vector0_Key9[] =
{
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
};
const uint8_t HMAC_SHA1_Vector0_Key10[] =
{
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
};
const uint8_t HMAC_SHA1_Vector0_Key11[] =
{
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
};
const uint8_t HMAC_SHA1_Vector0_Key12[] =
{
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
};

const uint8_t HMAC_SHA1_hash_ref[HMAC_SHA1_NUMBER_OF_TEST][20] = 
{
    {0x5F,0xD5,0x96,0xEE,0x78,0xD5,0x55,0x3C,0x8F,0xF4,0xE7,0x2D,0x26,0x6D,0xFD,0x19,0x23,0x66,0xDA,0x29},
    {0x4C,0x99,0xFF,0x0C,0xB1,0xB3,0x1B,0xD3,0x3F,0x84,0x31,0xDB,0xAF,0x4D,0x17,0xFC,0xD3,0x56,0xA8,0x07},
    {0x2D,0x51,0xB2,0xF7,0x75,0x0E,0x41,0x05,0x84,0x66,0x2E,0x38,0xF1,0x33,0x43,0x5F,0x4C,0x4F,0xD4,0x2A},
    {0xFE,0x35,0x29,0x56,0x5C,0xD8,0xE2,0x8C,0x5F,0xA7,0x9E,0xAC,0x9D,0x80,0x23,0xB5,0x3B,0x28,0x9D,0x96},

    {0xb6,0x17,0x31,0x86,0x55,0x05,0x72,0x64,0xe2,0x8b,0xc0,0xb6,0xfb,0x37,0x8c,0x8e,0xf1,0x46,0xbe,0x00},
    {0xef,0xfc,0xdf,0x6a,0xe5,0xeb,0x2f,0xa2,0xd2,0x74,0x16,0xd5,0xf1,0x84,0xdf,0x9c,0x25,0x9a,0x7c,0x79},
    {0x12,0x5d,0x73,0x42,0xb9,0xac,0x11,0xcd,0x91,0xa3,0x9a,0xf4,0x8a,0xa1,0x7b,0x4f,0x63,0xf1,0x75,0xd3},
    {0x4c,0x90,0x07,0xf4,0x02,0x62,0x50,0xc6,0xbc,0x84,0x14,0xf9,0xbf,0x50,0xc8,0x6c,0x2d,0x72,0x35,0xda},
    {0x4c,0x1a,0x03,0x42,0x4b,0x55,0xe0,0x7f,0xe7,0xf2,0x7b,0xe1,0xd5,0x8b,0xb9,0x32,0x4a,0x9a,0x5a,0x04},
    {0xaa,0x4a,0xe5,0xe1,0x52,0x72,0xd0,0x0e,0x95,0x70,0x56,0x37,0xce,0x8a,0x3b,0x55,0xed,0x40,0x21,0x12},
    {0xe8,0xe9,0x9d,0x0f,0x45,0x23,0x7d,0x78,0x6d,0x6b,0xba,0xa7,0x96,0x5c,0x78,0x08,0xbb,0xff,0x1a,0x91},
    {0xaa,0x4a,0xe5,0xe1,0x52,0x72,0xd0,0x0e,0x95,0x70,0x56,0x37,0xce,0x8a,0x3b,0x55,0xed,0x40,0x21,0x12},
    {0xe8,0xe9,0x9d,0x0f,0x45,0x23,0x7d,0x78,0x6d,0x6b,0xba,0xa7,0x96,0x5c,0x78,0x08,0xbb,0xff,0x1a,0x91},
};

const uint8_t * const HMAC_SHA1_KeyPtr[HMAC_SHA1_NUMBER_OF_TEST] = 
{
    HMAC_SHA1_Vector0_Key0,
    HMAC_SHA1_Vector0_Key1,
    HMAC_SHA1_Vector0_Key2,
    HMAC_SHA1_Vector0_Key3,
    HMAC_SHA1_Vector0_Key4,
    HMAC_SHA1_Vector0_Key5,
    HMAC_SHA1_Vector0_Key6,
    HMAC_SHA1_Vector0_Key7,
    HMAC_SHA1_Vector0_Key8,
    HMAC_SHA1_Vector0_Key9,
    HMAC_SHA1_Vector0_Key10,
    HMAC_SHA1_Vector0_Key11,
    HMAC_SHA1_Vector0_Key12,
};

const uint32_t HMAC_SHA1_KeyLen[HMAC_SHA1_NUMBER_OF_TEST] = 
{
    sizeof(HMAC_SHA1_Vector0_Key0) / sizeof(HMAC_SHA1_Vector0_Key0[0]),
    sizeof(HMAC_SHA1_Vector0_Key1) / sizeof(HMAC_SHA1_Vector0_Key1[0]),
    sizeof(HMAC_SHA1_Vector0_Key2) / sizeof(HMAC_SHA1_Vector0_Key2[0]),
    sizeof(HMAC_SHA1_Vector0_Key3) / sizeof(HMAC_SHA1_Vector0_Key3[0]),
    sizeof(HMAC_SHA1_Vector0_Key4) / sizeof(HMAC_SHA1_Vector0_Key4[0]),
    sizeof(HMAC_SHA1_Vector0_Key5) / sizeof(HMAC_SHA1_Vector0_Key5[0]),
    sizeof(HMAC_SHA1_Vector0_Key6) / sizeof(HMAC_SHA1_Vector0_Key6[0]),
    sizeof(HMAC_SHA1_Vector0_Key7) / sizeof(HMAC_SHA1_Vector0_Key7[0]),
    sizeof(HMAC_SHA1_Vector0_Key8) / sizeof(HMAC_SHA1_Vector0_Key8[0]),
    sizeof(HMAC_SHA1_Vector0_Key9) / sizeof(HMAC_SHA1_Vector0_Key9[0]),
    sizeof(HMAC_SHA1_Vector0_Key10) / sizeof(HMAC_SHA1_Vector0_Key10[0]),
    sizeof(HMAC_SHA1_Vector0_Key11) / sizeof(HMAC_SHA1_Vector0_Key11[0]),
    sizeof(HMAC_SHA1_Vector0_Key12) / sizeof(HMAC_SHA1_Vector0_Key12[0]),
};

uint8_t HMAC_SHA1_hash[HMAC_SHA1_NUMBER_OF_TEST][20];

#endif

#endif

